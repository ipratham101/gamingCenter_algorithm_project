#include<iostream>
#include<map>
#include<list>
#include<climits>
#include<vector>
using namespace std;
#define nV 9
#define N 9
class neighbour
{
public:
	string name;
	int distance;

	neighbour(string name,int distance)
	{
		this->name=name;
		this->distance=distance;
	}
};
class graph{
public:
	map<string,list<neighbour>> neighbourMap;
	void addEdge(string u,string v,int w)
	{
	
		neighbourMap[u].push_back(neighbour(v,w));
		neighbourMap[v].push_back(neighbour(u,w));
	}

	void print()
	{
		for(auto x:neighbourMap)
		{
			list<neighbour> neighbourList=x.second;
			cout<<x.first<<": ";
			for(auto y:neighbourList)
			{
				cout<<y.name<<" "<<y.distance<<";";
			}
			cout<<endl<<endl;

		}
	}

};
void floydWarshall(vector<vector<long long int>>& nums)
{
	for(int k=0;k<9;k++)
	{
		for(int i=0;i<9;i++)
		{
			for(int j=0;j<9;j++)
			{
				if(nums[i][k]+nums[k][j]<nums[i][j])
				{
					nums[i][j]=nums[i][k]+nums[k][j];
				}
			}
		}
	}
	
	for(int i=0;i<9;i++)
	{
		for(int j=0;j<9;j++)
			cout<<nums[i][j]<<" ";
		cout<<endl;
	}
}
void printGrid(int grid[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << grid[i][j] << " ";
        }
        cout << endl;
    }
}
bool isValid(int grid[N][N], int row, int col, int num) {
    // Check if the same number already exists in the row
    for (int i = 0; i < N; i++) {
        if (grid[row][i] == num) {
            return false;
        }
    }
    // Check if the same number already exists in the column
    for (int i = 0; i < N; i++) {
        if (grid[i][col] == num) {
            return false;
        }
    }
    // Check if the same number already exists in the 3x3 box
    int boxRow = row - row % 3;
    int boxCol = col - col % 3;
    for (int i = boxRow; i < boxRow + 3; i++) {
        for (int j = boxCol; j < boxCol + 3; j++) {
            if (grid[i][j] == num) {
                return false;
            }
        }
    }
    // If none of the above conditions are met, the number is valid
    return true;
}// Create a vector to store the empty cells in the grid
  bool solveSudoku(int grid[N][N]){  
      vector<pair<int, int>> emptyCells;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (grid[i][j] == 0) {
                emptyCells.push_back(make_pair(i, j));
            }
        }
    }
    // Keep track of the number of empty cells before applying the algorithm
    int numEmptyCells = emptyCells.size();
    // Keep iterating until no more empty cells can be filled
    while (emptyCells.size() > 0) {
        // Iterate over all the empty cells
        for (int i = 0; i < emptyCells.size(); i++) {
            int row = emptyCells[i].first;
            int col = emptyCells[i].second;
            // Keep track of the possible numbers that can be filled in the cell
            vector<int> possibleNumbers;
            for (int num = 1; num <= N; num++) {
                if (isValid(grid, row, col, num)) {
                    possibleNumbers.push_back(num);
                }
            }
            // If there is only one possible number, fill it in the cell
            if (possibleNumbers.size() == 1) {
                grid[row][col] = possibleNumbers[0];
                emptyCells.erase(emptyCells.begin() + i);
                break;
            }
        }
        // If no progress has been made, stop iterating
        if (emptyCells.size() == numEmptyCells) {
            return false;
        }
        numEmptyCells = emptyCells.size();
    }
    // If all the empty cells have been filled, the Sudoku puzzle has been solved
    return true;
  }
void playSudoku(int grid[N][N]){
    cout << "Initial Sudoku grid:" << endl;
printGrid(grid);
bool solved = solveSudoku(grid);
if (solved) {
cout << "Solved Sudoku grid:" << endl;
printGrid(grid);
} else {
cout << "Unable to solve Sudoku grid" << endl;
}
}

int main()
{
    //FOR SUDOKU N=9;
	graph g;
	//temp3->cafe
	//temp1->parking
	//temp2->SC shopping complex
	g.addEdge("Gaming Center1","Shopping Complex",10);
	g.addEdge("Gaming Center1","Cafe",12);
	g.addEdge("Shopping Complex","Recharge Center",18);
	g.addEdge("Cinema","Recharge Center",7);
	g.addEdge("Cinema","Food Court",23);
	g.addEdge("Food Court","Home",34);
	g.addEdge("Food Court","Gaming Center2",30);
	g.addEdge("Home","Cafe",41);
	g.addEdge("Parking","Cinema",25);
	g.addEdge("Parking","Cafe",21);
	int max=INT_MAX;
	vector<vector<long long>> wMatrix{{0,41,max,max,max,max,34,max,max},
								{41,0,12,max,max,max,max,max,21},
								{max,12,0,10,max,max,max,max,max},
								{max,max,10,0,18,max,max,max,max},
								{max,max,max,18,0,7,max,max,max},
								{max,max,max,max,7,0,23,max,25},
								{34,max,max,max,max,23,0,30,max},
								{max,max,max,max,max,max,30,0,max},
								{max,21,max,max,max,25,max,max,0}};
	floydWarshall(wMatrix);
	
	g.print();
	string dest;
	vector<string> names{"Gaming Center1","Gaming Center2","Food Court","Recharge Center","Parking","Cafe","Cinema","Home"};
	vector<string> path{"Home"};
		vector<string> searching{"Home","Cafe","Gaming Center1","Shopping Complex","Recharge Center","Cinema","Food Court","Gaming Center2",
		    "Parking"
		};
	int pathDist=0;
	cout<<endl<<"You are at home!!";
	cout<<endl<<"Where do you want to go?";
	getline(cin,dest);
	cout<<"Enter your path:";
	string place;
	string prev="Home";
	getline(cin,place);
	while(place!=dest)
	{
		path.push_back(place);
		list<neighbour> neighbourList=g.neighbourMap[place];
		for(auto x:neighbourList)
		{
			if(x.name==prev)
			{
				pathDist+=x.distance;
				break;
			}
		}
		prev=place;
		getline(cin,place);
	}
	list<neighbour> neighbourList=g.neighbourMap[place];
	for(auto x:neighbourList)
	{
		if(x.name==prev)
		{
			pathDist+=x.distance;
			break;
		}
	}
//GAMES INITIALIZATION
int grid[N][N] = {
{0, 0, 3, 0, 2, 0, 6, 0, 0},
{9, 0, 0, 3, 0, 5, 0, 0, 1},
{0, 0, 1, 8, 0, 6, 4, 0, 0},
{0, 0, 8, 1, 0, 2, 9, 0, 0},
{7, 0, 0, 0, 0, 0, 0, 0, 8},
{0, 0, 6, 7, 0, 8, 2, 0, 0},
{0, 0, 2, 6, 0, 9, 5, 0, 0},
{8, 0, 0, 2, 0, 3, 0, 0, 9},
{0, 0, 5, 0, 1, 0, 3, 0, 0}
};
	int rem=pathDist;
	int index = 0;
		if(place == "Gaming Center1"){
		     char input;
	    cout<<"What you want to play?"<<endl;
	    cout<<"Sudoku Or Snake and Ladder"<<endl;
	    cout<<"press a for Sudoku and b for Snake and Ladder"<<endl;
	   cin>>input;
	   if(input == 'a'){
	       playSudoku(grid);
	   }
	}
cout<<pathDist;
	//finding where is place in vector of string and storing in the
	//variable index
	for(int i=0; i<searching.size(); i++){
	    if(searching[i] == place){
	        index = i;
	    }
	}
	cout<<"shortest distance from home to "<<place<<" is: "
	<<wMatrix[0][index];

	return 0;
}